name: Build projects.json

on:
  push:
    branches: [ main ]
    paths:
      - README.md
      - .github/workflows/build-projects.yml
  schedule:
    # Runs every 12 hours (GitHub cron is UTC)
    - cron: "17 */12 * * *"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: build-projects-json
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Generate projects.json from README links
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            // 1) Read README (base64) -> plain text
            const readme = await github.request('GET /repos/{owner}/{repo}/readme', { owner, repo });
            const md = Buffer.from(readme.data.content, 'base64').toString('utf8');

            // 2) Extract github.com/<owner>/<repo> links (http or https)
            const links = Array.from(md.matchAll(/https?:\/\/github\.com\/([\w-]+)\/([\w.-]+)/g))
              .map(m => ({ owner: m[1], name: m[2], url: m[0] }));

            // De-duplicate <owner>/<repo>
            const seen = new Set();
            const repos = links.filter(r => {
              const key = `${r.owner}/${r.name}`;
              if (seen.has(key)) return false;
              seen.add(key);
              return true;
            });

            // 3) Fetch metadata + top contributors for each project
            const out = [];
            for (const r of repos) {
              try {
                const meta = await github.request('GET /repos/{owner}/{repo}', {
                  owner: r.owner, repo: r.name
                });

                let contribs = [];
                try {
                  const c = await github.request('GET /repos/{owner}/{repo}/contributors', {
                    owner: r.owner, repo: r.name, per_page: 6
                  });
                  contribs = (c.data || []).map(u => ({
                    login: u.login,
                    avatar_url: u.avatar_url,
                    html_url: u.html_url
                  }));
                } catch (e) {
                  // contributors API might be disabled on some forks — ignore
                }

                out.push({
                  name: meta.data.name,
                  path: `${r.owner}/${r.name}`,
                  url: meta.data.html_url,
                  updatedAt: meta.data.pushed_at || meta.data.updated_at || null,
                  description: meta.data.description || '',
                  contributors: contribs
                });
              } catch (e) {
                // Repo might be private/renamed/deleted — include minimal card
                out.push({
                  name: `${r.owner}/${r.name}`,
                  path: `${r.owner}/${r.name}`,
                  url: r.url,
                  updatedAt: null,
                  description: '',
                  contributors: []
                });
              }
            }

            // 4) Sort by name (stable) — your page can re-sort
            out.sort((a, b) => a.name.localeCompare(b.name));

            // 5) Write projects.json at repo root
            fs.writeFileSync('projects.json', JSON.stringify(out, null, 2) + '\n', 'utf8');

      - name: Commit projects.json
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: update projects.json"
          file_pattern: projects.json
